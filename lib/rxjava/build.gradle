/*
 *
 *  Copyright (C) 2017-2020 Pierre Thomain
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

plugins {
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

group = 'dev.pthomain.glitchy'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules-lib.pro'
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lib.pro'
        }

        release {
            minifyEnabled true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lib.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/eclipse.inf'
        exclude 'META-INF/index.list'
        exclude 'META-INF/INDEX.LIST'
        exclude 'about_files/LICENSE-2.0.txt'
        exclude 'plugin.xml'
        exclude 'plugin.properties'
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
        resolutionStrategy.force 'com.google.guava:guava:20.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task classesJar(type: Jar) {
    from "$buildDir/intermediates/javac/release/classes"
}

artifacts {
    archives classesJar
    archives javadocJar
    archives sourcesJar
}

project.ext {
    mavGitUrl = 'https://github.com/pthomain/glitchy.git'
    mavProjectName = 'Glitchy'
    mavLibraryLicenses = ["Apache-2.0": 'http://www.apache.org/licenses/LICENSE-2.0.txt']
    mavLibraryDescription = "Make sense of your API errors"
    mavPublishToMavenLocal = true
    mavSiteUrl = 'https://github.com/pthomain/glitchy'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


signing {
    sign publishing.publications.release
}

publishing {
    publications {
        release(MavenPublication) {
            groupId 'io.github.pthomain'
            artifactId 'rxjava'
            version glitchyVersion
            artifact("$buildDir/outputs/aar/rxjava-release.aar")

            pom {
                name = 'Glitchy'
                description = 'Make sense of your API errors'
                url = 'https://github.com/pthomain/glitchy'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pthomain'
                        name = 'Pierre Thomain'
                        email = 'pierre.thom@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/pthomain/glitchy.git'
                    developerConnection = 'scm:git:ssh://github.com/pthomain/glitchy.git'
                    url = 'https://github.com/pthomain/glitchy'
                }
            }

            // Define this explicitly if using implementation or api configurations
            pom.withXml {
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}





    api project(':lib:core')

    implementation appDependencies.boilerplate
    implementation appDependencies.multiDex

    implementation appDependencies.rxJava
    implementation appDependencies.rxKotlin
    implementation appDependencies.rxAndroid
    implementation appDependencies.rxDogTag

    implementation appDependencies.koinCore
    implementation appDependencies.koinCoreExt

    implementation appDependencies.kotlinJdk8
}
