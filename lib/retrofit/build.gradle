/*
 *
 *  Copyright (C) 2017-2020 Pierre Thomain
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

//plugins {
//    id 'maven-publish'
//}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'com.github.dcendents.android-maven'

group = 'dev.pthomain.glitchy'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules-lib.pro'
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lib.pro'
        }

        release {
            minifyEnabled true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lib.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/eclipse.inf'
        exclude 'META-INF/index.list'
        exclude 'META-INF/INDEX.LIST'
        exclude 'about_files/LICENSE-2.0.txt'
        exclude 'plugin.xml'
        exclude 'plugin.properties'
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
        resolutionStrategy.force 'com.google.guava:guava:20.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task classesJar(type: Jar) {
    from "$buildDir/intermediates/classes/release"
}

artifacts {
    archives classesJar
    archives javadocJar
    archives sourcesJar
}

//afterEvaluate {
//    publishing {
//        repositories {
//            maven {
//                name = "GitHubPackages"
//                url = uri("https://maven.pkg.github.com/pthomain/dejavu")
//                credentials {
//                    Properties properties = new Properties()
//                    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//                    username = properties.getProperty("gpr.user")
//                    password = properties.getProperty("gpr.key")
//                }
//            }
//        }
//        publications {
//            compression(MavenPublication) {
//                groupId = 'dev.pthomain.dejavu'
//                artifactId = 'compression-snappy'
//                version = dejaVuVersion
//                artifact("$buildDir/outputs/aar/compression-release.aar")
//            }
//            mavenJava(MavenPublication) {
//                pom {
//                    name = 'DejaVu'
//                    description = 'Dead simple Retrofit / RxJava cache'
//                    url = 'https://github.com/pthomain/dejavu'
//                    licenses {
//                        license {
//                            name = 'The Apache License, Version 2.0'
//                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
//                    developers {
//                        developer {
//                            id = 'pthomain'
//                            name = 'Pierre Thomain'
//                        }
//                    }
//                    scm {
//                        connection = 'scm:git:git://github.com/pthomain/dejavu.git'
//                        developerConnection = 'scm:git:ssh://github.com/pthomain/dejavu.git'
//                        url = 'https://github.com/pthomain/dejavu'
//                    }
//                }
//            }
//        }
//    }
//}

dependencies {
    implementation project(':lib:core')

    implementation appDependencies.jitPack
    api appDependencies.boilerplate

    implementation appDependencies.koinCore
    implementation appDependencies.koinCoreExt

    api appDependencies.rxJava
    api appDependencies.rxKotlin
    api appDependencies.rxAndroid
    api appDependencies.rxDogTag

    implementation appDependencies.kotlinJdk8

    implementation appDependencies.retrofit
    implementation appDependencies.retrofitAdapterRxJava

}
